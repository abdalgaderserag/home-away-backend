version: '3.8'

services:
    app:
        build:
            context: ../..
            dockerfile: docker/production/Dockerfile
        restart: unless-stopped
        ports:
            - "9000:9000"
        env_file:
            - .env.production
        environment:
            # App Configuration (Production)
            APP_ENV: production
            APP_DEBUG: false
            LOG_LEVEL: error
            # Database Configuration
            DB_CONNECTION: pgsql
            DB_HOST: db
            DB_PORT: 5432
            DB_DATABASE: ${DB_DATABASE}
            DB_USERNAME: ${DB_USERNAME}
            DB_PASSWORD: ${DB_PASSWORD}
            # Redis Configuration (Production)
            REDIS_HOST: redis
            REDIS_PORT: 6379
            REDIS_PASSWORD: ${REDIS_PASSWORD}
            REDIS_DB: 0
            # Queue Configuration (Production)
            QUEUE_CONNECTION: redis
            # Broadcasting Configuration (Production)
            BROADCAST_DRIVER: redis
            CACHE_DRIVER: redis
            SESSION_DRIVER: redis
        volumes:
            - app_storage:/var/www/html/storage
            - app_cache:/var/www/html/bootstrap/cache
        depends_on:
            - db
            - redis
        networks:
            - app-network

    nginx:
        image: nginx:alpine
        restart: unless-stopped
        volumes:
            - ../../:/var/www/html
            - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
            - ./nginx/ssl:/etc/nginx/ssl:ro
        ports:
            - "80:80"
            - "443:443"
        depends_on:
            - app
        networks:
            - app-network

    db:
        image: postgres:15-alpine
        restart: unless-stopped
        env_file:
            - .env.production
        environment:
            POSTGRES_DB: ${DB_DATABASE}
            POSTGRES_USER: ${DB_USERNAME}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
        volumes:
            - db_data:/var/lib/postgresql/data
        networks:
            - app-network
        expose:
            - 5432

    redis:
        image: redis:7-alpine
        restart: unless-stopped
        command: redis-server --requirepass ${REDIS_PASSWORD}
        volumes:
            - redis_data:/data
        networks:
            - app-network

    # Optional: Redis Sentinel for high availability
    redis-sentinel:
        image: redis:7-alpine
        restart: unless-stopped
        command: redis-sentinel /usr/local/etc/redis/sentinel.conf
        volumes:
            - ./redis/sentinel.conf:/usr/local/etc/redis/sentinel.conf:ro
        depends_on:
            - redis
        networks:
            - app-network

volumes:
    db_data:
    app_storage:
    app_cache:
    redis_data:

networks:
    app-network:
        driver: bridge
